# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  test:
    docker:
      # specify the version you desire here
      - image: circleci/node:9.2.1
        environment:
            NODE_ENV: test
      - image: circleci/postgres:10.3-alpine-postgis
        environment:
          POSTGRES_USER: circle_test
          POSTGRES_DB: tt_history_test

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
        
      - run: yarn test
      
  pre_deploy:
    docker:
      - image: google/cloud-sdk
        environment:
          GOOGLE_PROJECT_ID: tokentax-infra-209601
          CLUSTER_NAME: tt-cluster
          COMPUTE_ZONE: us-east1-c
          #As specified in Deployment.yml
          DEPLOYMENT_NAME: tt-pricing-dep
          CONTAINER_NAME: pricing
    steps:
      - run:
          name: Store Service Account
          command: echo $GCLOUD_SERVICE_KEY > key.txt
      - run:
          name: Decode Service Account
          command: base64 -i key.txt -d > ${HOME}/gcloud-service-key.json
      
      - run: gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json

      # # Authenticate CircleCI with the service account file
      # - run: sudo /opt/google-cloud-sdk/bin/gcloud auth activate-service-account ${ACCOUNT_ID} --key-file ${HOME}/gcloud-service-key.json
      # # Set the default project
      # - run: sudo /opt/google-cloud-sdk/bin/gcloud config set project $GOOGLE_PROJECT_ID
      # # Set the default container
      # - run: sudo /opt/google-cloud-sdk/bin/gcloud --quiet config set container/cluster $CLUSTER_NAME
      # # Set the compute zone
      # - run: sudo /opt/google-cloud-sdk/bin/gcloud config set compute/zone $COMPUTE_ZONE
      # # Get the cluster credentials.
      # - run: sudo /opt/google-cloud-sdk/bin/gcloud --quiet container clusters get-credentials $CLUSTER_NAME

      - run: gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run: gcloud --quiet config set compute/zone ${COMPUTE_ZONE}
      - run: gcloud --quiet container clusters get-credentials ${CLUSTER_NAME}
          
      # Start good old Docker
      # - run: service docker start
      # Build a Docker image and use the Github commit hash ($CIRCLE_SHA1) as the tag
      
      - run: ls
      
      # Push the Image to the GCP Container Registry
      # - run: /opt/google-cloud-sdk/bin/gcloud docker -- push gcr.io/${GOOGLE_PROJECT_ID}/pricing:$CIRCLE_SHA1
      # Update the default image for the deployment
      # - run: /opt/google-cloud-sdk/bin/kubectl set image deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=gcr.io/${GOOGLE_PROJECT_ID}/pricing:${CIRCLE_SHA1}
  
  deploy-job:
      docker:
        - image: my-image-version-tag
      working_directory: /tmp/my-project  
      steps:
        - checkout
        - run: docker build -t pricing:${CIRCLE_SHA1} .
        - run:
            name: Deploy Master to GKE
            command: /opt/google-cloud-sdk/bin/gcloud docker -- push us.gcr.io/${GOOGLE_PROJECT_ID}/pricing:$CIRCLE_SHA1

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - test
      - pre_deploy:
          requires:
            - test
      - deploy:
          requires:
            - pre_deploy



